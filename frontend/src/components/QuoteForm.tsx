'use client'
import { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { calcQuote, createQuote } from '@/app/api'

/**
 * Represents a quote item with confidence and change tracking
 */
type Item = { 
  kind: 'labor'|'material'|'custom'; 
  description?: string; 
  ref?: string; 
  unit?: string; 
  qty: number; 
  unit_price: number;
  confidence?: 'low' | 'medium' | 'high';
  originalQty?: number; // For tracking changes
  isModified?: boolean; // For visual indication
}

/**
 * AI-prepared sections for quote context
 */
type AISections = {
  summary: string;
  assumptions: string;
  exclusions: string;
  timeline: string;
}

/**
 * Source item for adjustment logging
 */
type SourceItem = {
  originalQty: number;
  newQty: number;
  description: string;
  kind: string;
  adjustment: number;
  adjustmentPercent: number;
}

export default function QuoteForm() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const reqId = searchParams.get('reqId')
  
  const [customer, setCustomer] = useState('Testkund AB')
  const [project, setProject] = useState('Badrum 6 m²')
  const [vatRate, setVatRate] = useState(25)
  const [items, setItems] = useState<Item[]>([])
  const [totals, setTotals] = useState<{subtotal:number, vat:number, total:number} | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [autoGenerated, setAutoGenerated] = useState(false)
  const [createdQuoteId, setCreatedQuoteId] = useState<string | null>(null)
  const [isDownloading, setIsDownloading] = useState(false)
  const [profileId, setProfileId] = useState<string | null>(null) // Add profile_id state
  
  // AI-prepared sections
  const [aiSections, setAISections] = useState<AISections>({
    summary: '',
    assumptions: '',
    exclusions: '',
    timeline: ''
  })

  // Check authentication and get profile_id on mount
  useEffect(() => {
    const checkAuthAndGetProfile = async () => {
      const token = localStorage.getItem('token')
      if (!token) {
        router.push('/')
        return
      }

      try {
        // Get companies first to get company_id
        const companiesResponse = await fetch('http://localhost:8000/companies', {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        })
        
        if (!companiesResponse.ok) {
          throw new Error('Failed to get companies')
        }
        
        const companies = await companiesResponse.json()
        if (!companies.length) {
          throw new Error('No company found')
        }
        
        const companyId = companies[0].id

        // Get price profile for this company
        const profileResponse = await fetch('http://localhost:8000/price-profiles', {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        })
        
        if (!profileResponse.ok) {
          throw new Error('Failed to get price profiles')
        }
        
        const profiles = await profileResponse.json()
        if (!profiles.length) {
          throw new Error('No price profile found')
        }
        
        const profileId = profiles[0].id
        setProfileId(profileId)
        console.log('Profile ID set to:', profileId)
        
      } catch (error) {
        console.error('Error getting profile:', error)
        alert('Kunde inte hämta prisprofil. Kontrollera att du är inloggad.')
      }
    }

    checkAuthAndGetProfile()
  }, [router])

  // Auto-generate quote items if reqId is provided
  useEffect(() => {
    if (reqId && !autoGenerated) {
      handleAutoGenerate()
    }
  }, [reqId, autoGenerated])

  /**
   * Auto-generates quote items from requirements
   */
  const handleAutoGenerate = async () => {
    if (!reqId) return
    
    try {
      setIsLoading(true)
      
      const token = localStorage.getItem('token')
      if (!token) {
        throw new Error('No authentication token')
      }

      // Get companies first to get company_id
      const companiesResponse = await fetch('http://localhost:8000/companies', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      })
      
      if (!companiesResponse.ok) {
        throw new Error('Failed to get companies')
      }
      
      const companies = await companiesResponse.json()
      if (!companies.length) {
        throw new Error('No company found')
      }
      
      const companyId = companies[0].id

      // Get price profile for this company
      const profileResponse = await fetch('http://localhost:8000/price-profiles', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      })
      
      if (!profileResponse.ok) {
        throw new Error('Failed to get price profiles')
      }
      
      const profiles = await profileResponse.json()
      if (!profiles.length) {
        throw new Error('No price profile found')
      }
      
      const profileId = profiles[0].id

      // Auto-generate quote items using the correct endpoint
      const response = await fetch('http://localhost:8000/quotes/autogenerate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          requirements_id: reqId,
          profile_id: profileId,
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to auto-generate quote')
      }

      const data = await response.json()
      
      // Convert auto-generated items to QuoteForm format with confidence and original values
      const generatedItems: Item[] = data.items.map((item: any) => ({
        kind: item.kind as 'labor' | 'material' | 'custom',
        ref: item.ref || '',
        description: item.description || '',
        qty: parseFloat(item.qty),
        unit: item.unit || '',
        unit_price: parseFloat(item.unit_price),
        confidence: item.confidence || 'medium',
        originalQty: parseFloat(item.qty), // Track original value
        isModified: false
      }))

      setItems(generatedItems)
      setAutoGenerated(true)
      
      // Calculate totals
      const totalsData = await calcQuote({
        customer_name: customer,
        project_name: project,
        profile_id: profileId,
        currency: 'SEK',
        vat_rate: vatRate,
        items: generatedItems,
      })
      
      setTotals(totalsData)
      
    } catch (error) {
      console.error('Error auto-generating quote:', error)
      alert('Kunde inte auto-generera offert. Skapa offert manuellt istället.')
    } finally {
      setIsLoading(false)
    }
  }

  /**
   * Updates an item and tracks changes
   */
  function updateItem(idx: number, patch: Partial<Item>) {
    setItems(prev => prev.map((it, i) => {
      if (i === idx) {
        const updatedItem = { ...it, ...patch }
        
        // Track quantity changes
        if (patch.qty !== undefined && it.originalQty !== undefined) {
          updatedItem.isModified = patch.qty !== it.originalQty
        }
        
        return updatedItem
      }
      return it
    }))
  }

  /**
   * Quick adjustment buttons for quantity
   */
  function adjustQuantity(idx: number, adjustment: number) {
    setItems(prev => prev.map((it, i) => {
      if (i === idx) {
        const newQty = Math.max(0, it.qty + adjustment)
        return {
          ...it,
          qty: newQty,
          isModified: it.originalQty !== undefined ? newQty !== it.originalQty : false
        }
      }
      return it
    }))
  }

  /**
   * Gets confidence badge styling
   */
  function getConfidenceBadgeStyle(confidence: string) {
    switch (confidence) {
      case 'high':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'low':
        return 'bg-red-100 text-red-800 border-red-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  /**
   * Gets confidence label in Swedish
   */
  function getConfidenceLabel(confidence: string) {
    switch (confidence) {
      case 'high':
        return 'Hög'
      case 'medium':
        return 'Medel'
      case 'low':
        return 'Låg'
      default:
        return 'Okänd'
    }
  }

  /**
   * Collects source items for adjustment logging
   */
  function getSourceItems(): SourceItem[] {
    return items
      .filter(item => item.isModified && item.originalQty !== undefined)
      .map(item => ({
        originalQty: item.originalQty!,
        newQty: item.qty,
        description: item.description || '',
        kind: item.kind,
        adjustment: item.qty - (item.originalQty || 0),
        adjustmentPercent: item.originalQty ? ((item.qty - item.originalQty) / item.originalQty) * 100 : 0
      }))
  }

  /**
   * Calculates quote totals
   */
  async function handleCalc() {
    if (!profileId) {
      alert('Väntar på att hämta prisprofil...')
      return
    }
    
    const payload = {
      customer_name: customer,
      project_name: project,
      profile_id: profileId,
      currency: 'SEK',
      vat_rate: vatRate,
      items: items
    }
    const res = await calcQuote(payload)
    setTotals(res)
  }

  /**
   * Creates quote with adjustment tracking
   */
  async function handleCreate() {
    if (!profileId) {
      alert('Väntar på att hämta prisprofil...')
      return
    }
    
    const sourceItems = getSourceItems()
    
    const payload = {
      customer_name: customer,
      project_name: project,
      profile_id: profileId,
      currency: 'SEK',
      vat_rate: vatRate,
      items: items,
      source_items: sourceItems, // Include adjustment tracking (snake_case for backend)
      aiSections: aiSections // Include AI-prepared sections
    }
    
    try {
      console.log('Creating quote with payload:', payload)
      const res = await createQuote(payload)
      console.log('Quote created successfully:', res)
      alert(`Offert skapad! ID: ${res.id}\nTotal: ${res.total} SEK`)
      setCreatedQuoteId(res.id)
      console.log('createdQuoteId set to:', res.id)
    } catch (error) {
      console.error('Error creating quote:', error)
      alert('Fel vid skapande av offert')
    }
  }

  /**
   * Downloads PDF for the created quote
   */
  async function handleDownloadPDF() {
    if (!createdQuoteId) return
    
    try {
      setIsDownloading(true)
      const token = localStorage.getItem('token')
      if (!token) {
        throw new Error('No authentication token')
      }
      
      console.log('Attempting to download PDF for quote:', createdQuoteId)
      
      // Call the generatePDF function from api.ts
      const response = await fetch(`http://localhost:8000/quotes/${createdQuoteId}/pdf`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      
      if (!response.ok) {
        const errorText = await response.text()
        console.error('PDF generation failed:', response.status, errorText)
        throw new Error(`PDF generation failed: ${response.status} - ${errorText}`)
      }
      
      console.log('PDF generated successfully, creating download...')
      
      // Create blob and download
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `offert_${createdQuoteId.slice(0, 8)}.pdf`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
      
      console.log('PDF download completed')
      
    } catch (error) {
      console.error('Error downloading PDF:', error)
      alert(`Fel vid nedladdning av PDF: ${error instanceof Error ? error.message : 'Okänt fel'}`)
    } finally {
      setIsDownloading(false)
    }
  }

  /**
   * Resets the form to create a new quote
   */
  function handleReset() {
    setCreatedQuoteId(null)
    setItems([])
    setTotals(null)
    setAISections({
      summary: '',
      assumptions: '',
      exclusions: '',
      timeline: ''
    })
    setCustomer('')
    setProject('')
    setVatRate(25)
    setAutoGenerated(false)
  }

  return (
    <div className="space-y-6">
      {/* Auto-generation info */}
      {reqId && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-blue-800">
                Auto-genererad från projektkrav
              </h3>
              <p className="text-sm text-blue-600 mt-1">
                ID: {reqId}
              </p>
            </div>
            <button
              onClick={handleAutoGenerate}
              disabled={isLoading}
              className="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
            >
              {isLoading ? 'Genererar...' : 'Regenerera'}
            </button>
          </div>
        </div>
      )}

      {/* Basic quote info */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <input 
          className="border rounded p-2" 
          value={customer} 
          onChange={e => setCustomer(e.target.value)} 
          placeholder="Kundnamn"
        />
        <input 
          className="border rounded p-2" 
          value={project} 
          onChange={e => setProject(e.target.value)} 
          placeholder="Projektnamn"
        />
        <div className="flex items-center gap-2">
          <input 
            className="border rounded p-2 flex-1" 
            type="number" 
            value={vatRate} 
            onChange={e => setVatRate(parseFloat(e.target.value))} 
            placeholder="Moms %"
          />
          {!profileId && (
            <div className="text-xs text-gray-500">
              Laddar profil...
            </div>
          )}
        </div>
      </div>

      {/* AI-prepared sections */}
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <h3 className="text-lg font-medium mb-4">AI-förberedda sektioner</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">Sammanfattning</label>
            <textarea
              className="w-full border rounded p-2 h-20"
              value={aiSections.summary}
              onChange={e => setAISections(prev => ({ ...prev, summary: e.target.value }))}
              placeholder="Projektsammanfattning..."
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Antaganden</label>
            <textarea
              className="w-full border rounded p-2 h-20"
              value={aiSections.assumptions}
              onChange={e => setAISections(prev => ({ ...prev, assumptions: e.target.value }))}
              placeholder="Grundläggande antaganden..."
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Exkluderingar</label>
            <textarea
              className="w-full border rounded p-2 h-20"
              value={aiSections.exclusions}
              onChange={e => setAISections(prev => ({ ...prev, exclusions: e.target.value }))}
              placeholder="Vad som inte ingår..."
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Tidslinje</label>
            <textarea
              className="w-full border rounded p-2 h-20"
              value={aiSections.timeline}
              onChange={e => setAISections(prev => ({ ...prev, timeline: e.target.value }))}
              placeholder="Projekttidslinje..."
            />
          </div>
        </div>
      </div>

      {/* Quote items */}
      <div className="space-y-3">
        <h3 className="text-lg font-medium">Offertrader</h3>
        
        {/* Header row */}
        <div className="grid grid-cols-12 gap-2 text-sm font-medium text-gray-600 pb-2 border-b">
          <div className="col-span-2">Typ</div>
          <div className="col-span-3">Beskrivning</div>
          <div className="col-span-1">Enhet</div>
          <div className="col-span-2">Antal</div>
          <div className="col-span-2">Á-pris</div>
          <div className="col-span-2">Åtgärder</div>
        </div>

        {/* Items */}
        {items.map((it, idx) => (
          <div 
            key={idx} 
            className={`grid grid-cols-12 gap-2 items-center p-3 rounded-lg border ${
              it.isModified ? 'bg-yellow-50 border-yellow-200' : 'bg-white border-gray-200'
            }`}
          >
            {/* Type with confidence badge */}
            <div className="col-span-2">
              <select 
                className="w-full border rounded p-2 text-sm" 
                value={it.kind} 
                onChange={e => updateItem(idx, { kind: e.target.value as Item['kind'] })}
              >
                <option value="labor">Arbete</option>
                <option value="material">Material</option>
                <option value="custom">Övrigt</option>
              </select>
              {it.confidence && (
                <div className={`mt-1 px-2 py-1 text-xs rounded-full border ${getConfidenceBadgeStyle(it.confidence)}`}>
                  {getConfidenceLabel(it.confidence)}
                </div>
              )}
            </div>

            {/* Description */}
            <div className="col-span-3">
              <input 
                className="w-full border rounded p-2 text-sm" 
                value={it.description || ''} 
                onChange={e => updateItem(idx, { description: e.target.value })} 
                placeholder="Beskrivning"
              />
            </div>

            {/* Unit */}
            <div className="col-span-1">
              <input 
                className="w-full border rounded p-2 text-sm" 
                value={it.unit || ''} 
                onChange={e => updateItem(idx, { unit: e.target.value })} 
                placeholder="Enhet"
              />
            </div>

            {/* Quantity with quick adjustment buttons */}
            <div className="col-span-2">
              <div className="flex items-center space-x-1">
                <button
                  onClick={() => adjustQuantity(idx, -0.1 * it.qty)}
                  className="px-2 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200"
                  title="-10%"
                >
                  -10%
                </button>
                <input 
                  className="w-full border rounded p-2 text-sm text-center" 
                  type="number" 
                  value={it.qty} 
                  onChange={e => updateItem(idx, { qty: parseFloat(e.target.value) || 0 })} 
                  placeholder="Antal"
                />
                <button
                  onClick={() => adjustQuantity(idx, 0.1 * it.qty)}
                  className="px-2 py-1 text-xs bg-green-100 text-green-700 rounded hover:bg-green-200"
                  title="+10%"
                >
                  +10%
                </button>
              </div>
              {it.isModified && (
                <div className="text-xs text-yellow-600 mt-1">
                  Ändrad från {it.originalQty}
                </div>
              )}
            </div>

            {/* Unit price */}
            <div className="col-span-2">
              <input 
                className="w-full border rounded p-2 text-sm" 
                type="number" 
                value={it.unit_price} 
                onChange={e => updateItem(idx, { unit_price: parseFloat(e.target.value) || 0 })} 
                placeholder="Á-pris"
              />
            </div>

            {/* Actions */}
            <div className="col-span-2 flex space-x-1">
              <button 
                className="px-2 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200" 
                onClick={() => setItems(prev => prev.filter((_, i) => i !== idx))}
                title="Ta bort rad"
              >
                Ta bort
              </button>
            </div>
          </div>
        ))}

        {/* Add new item button */}
        <button 
          className="rounded bg-gray-200 px-3 py-2 hover:bg-gray-300" 
          onClick={() => setItems(prev => [...prev, {
            kind: 'labor', 
            qty: 1, 
            unit_price: 0,
            confidence: 'medium',
            originalQty: 1,
            isModified: false
          } as Item])}
        >
          + Lägg till rad
        </button>
      </div>

      {/* Action buttons */}
      <div className="flex gap-3">
        <button 
          className="rounded bg-black text-white px-4 py-2 hover:bg-gray-800 disabled:opacity-50" 
          onClick={handleCalc}
          disabled={!profileId}
        >
          {profileId ? 'Räkna' : 'Laddar profil...'}
        </button>
        <button 
          className="rounded bg-emerald-600 text-white px-4 py-2 hover:bg-emerald-700 disabled:opacity-50" 
          onClick={handleCreate}
          disabled={!profileId}
        >
          {profileId ? 'Spara offert' : 'Laddar profil...'}
        </button>
      </div>

      {/* PDF Download section - shown after quote creation */}
      {createdQuoteId && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-green-800">
                Offert skapad framgångsrikt!
              </h3>
              <p className="text-sm text-green-600 mt-1">
                ID: {createdQuoteId}
              </p>
            </div>
            <div className="flex gap-2">
              <button
                onClick={handleDownloadPDF}
                disabled={isDownloading}
                className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50 flex items-center gap-2"
              >
                {isDownloading ? (
                  <>
                    <svg className="animate-spin h-4 w-4" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"/>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                    </svg>
                    Genererar PDF...
                  </>
                ) : (
                  <>
                    <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Ladda ner PDF
                  </>
                )}
              </button>
              <button
                onClick={handleReset}
                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 flex items-center gap-2"
              >
                <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Ny offert
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Totals */}
      {totals && (
        <div className="mt-4 border rounded p-3 bg-white">
          <div>Delsumma: <strong>{totals.subtotal.toFixed(2)} SEK</strong></div>
          <div>Moms: <strong>{totals.vat.toFixed(2)} SEK</strong></div>
          <div>Totalt: <strong>{totals.total.toFixed(2)} SEK</strong></div>
        </div>
      )}

      {/* Change summary */}
      {getSourceItems().length > 0 && (
        <div className="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-blue-800 mb-2">Ändringar från original</h4>
          <div className="space-y-1 text-sm text-blue-700">
            {getSourceItems().map((item, idx) => (
              <div key={idx}>
                {item.description}: {item.originalQty} → {item.newQty} 
                ({item.adjustment > 0 ? '+' : ''}{item.adjustment.toFixed(2)}, 
                {item.adjustmentPercent > 0 ? '+' : ''}{item.adjustmentPercent.toFixed(1)}%)
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}
