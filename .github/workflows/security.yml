name: Security Scan

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter (Python)
      uses: python-security/bandit@main
      with:
        args: -r backend/ -f json -o bandit-report.json -ll

    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.8.0
      if: github.event_name == 'pull_request'
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔒 Security Scan Results\n\n';
          
          // Check Trivy results
          if (fs.existsSync('trivy-results.sarif')) {
            comment += '### 🐳 Container Security (Trivy)\n';
            comment += 'Container security scan completed. Check the Security tab for details.\n\n';
          }
          
          // Check Bandit results
          if (fs.existsSync('bandit-report.json')) {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            if (banditReport.results && banditReport.results.length > 0) {
              comment += '### 🐍 Python Security (Bandit)\n';
              comment += `Found ${banditReport.results.length} security issues:\n`;
              banditReport.results.forEach(result => {
                comment += `- **${result.issue_severity}**: ${result.issue_text} in ${result.filename}:${result.line_number}\n`;
              });
              comment += '\n';
            }
          }
          
          // Check npm audit results
          if (fs.existsSync('npm-audit.json')) {
            const npmAudit = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
            if (npmAudit.metadata && npmAudit.metadata.vulnerabilities) {
              const vulns = npmAudit.metadata.vulnerabilities;
              const totalVulns = Object.values(vulns).reduce((sum, vuln) => sum + vuln, 0);
              if (totalVulns > 0) {
                comment += '### 📦 Node.js Security (npm audit)\n';
                comment += `Found ${totalVulns} vulnerabilities:\n`;
                Object.entries(vulns).forEach(([severity, count]) => {
                  comment += `- **${severity}**: ${count}\n`;
                });
                comment += '\n';
              }
            }
          }
          
          if (comment === '## 🔒 Security Scan Results\n\n') {
            comment += '✅ No security issues found!\n';
          }
          
          comment += '\n---\n*This comment was automatically generated by the security scan workflow.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 
