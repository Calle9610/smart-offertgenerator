name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing & Linting
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: quotes_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc libgirepository1.0-dev pkg-config libcairo2-dev libpango1.0-dev libgdk-pixbuf2.0-dev libffi-dev shared-mime-info

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio pytest-cov black isort mypy

    - name: Run linting
      working-directory: ./backend
      run: |
        echo "Running Black..."
        black --check --diff .
        echo "Running isort..."
        isort --check-only --diff .
        echo "Running mypy..."
        mypy app/

    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+psycopg://app:app@localhost:5432/quotes_test
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing & Linting
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Build application
      working-directory: ./frontend
      run: npm run build

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter (Python)
      uses: python-security/bandit@main
      with:
        args: -r backend/ -f json -o bandit-report.json

    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

  # Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and test Docker images
      run: |
        # Test backend build
        docker build -t smart-offertgenerator-backend:test ./backend
        docker run --rm smart-offertgenerator-backend:test python -c "import fastapi; print('Backend build successful')"
        
        # Test frontend build
        docker build -t smart-offertgenerator-frontend:test ./frontend
        docker run --rm smart-offertgenerator-frontend:test node -e "console.log('Frontend build successful')"

    - name: Build and push Docker images
      if: github.ref == 'refs/heads/main'
      run: |
        # Build and push backend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }} ./backend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest ./backend
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        
        # Build and push frontend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }} ./frontend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest ./frontend
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services
      run: |
        docker-compose up -d db
        sleep 10  # Wait for database to be ready

    - name: Run integration tests
      run: |
        # Test database connection
        docker-compose run --rm backend python -c "
        from app.db import engine
        from sqlalchemy import text
        with engine.connect() as conn:
            result = conn.execute(text('SELECT 1'))
            print('Database connection successful')
        "
        
        # Test API endpoints
        docker-compose run --rm backend python -c "
        from app.main import app
        from fastapi.testclient import TestClient
        client = TestClient(app)
        response = client.get('/health')
        print(f'Health check: {response.status_code}')
        assert response.status_code == 200
        "

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be deploying to a staging server, updating staging environment, etc.

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # This could be deploying to a production server, updating production environment, etc.

  # Notify on Success/Failure
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ All checks passed successfully!"
        # Add your notification logic here (Slack, Discord, email, etc.)
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Some checks failed!"
        # Add your notification logic here (Slack, Discord, email, etc.) 
